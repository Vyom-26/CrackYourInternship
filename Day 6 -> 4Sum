Question Link :  https://leetcode.com/problems/4sum/description/



Code : 



//O(n^4) is naive brute force 4 for loops

//O(n^3) solution below
// class Solution {
// public:
//     vector<vector<int>> fourSum(vector<int>& nums, int target) {
//         int n = nums.size();
//         set<vector<int>>st;
//         for(int i=0;i<n;i++){
//             for(int j=i+1;j<n;j++){
//                 set<long long>hashSet;
//                 for(int k=j+1;k<n;k++){
//                     long long sum = nums[i];
//                     sum+=nums[j];
//                     sum+=nums[k];
//                     long long fourth = target - sum;
//                     if(hashSet.find(fourth)!=hashSet.end()){
//                         vector<int>temp = {nums[i], nums[j], nums[k], (int)fourth};
//                         sort(temp.begin(), temp.end());
//                         st.insert(temp);
//                     }
//                     hashSet.insert(nums[k]);
//                 }
//             }
//         }
//         vector<vector<int>>ans(st.begin(), st.end());
//         return ans;
//     }
// };
// auto init = []()
// {
//     ios::sync_with_stdio(false);
//     cin.tie(nullptr);
//     cout.tie(nullptr);
//     return 'c';
// }();





//optimal solution 
#include <bits/stdc++.h>
#define ll long long
#define MOD 1000000007
#define arr_inp  long long arr[n]; for(long long i=0;i<n;i++){cin>>arr[i];}
#define vec_inp vector<long long>arr(n); for(int i=0;i<n;i++){ int x; cin>>x; arr[i] = x;}
#define arr_vec_output for(int i=0;i<n;i++){ cout<<arr[i]<<" ";} cout<<endl;
#define map_arr_inp  unordered_map<long long, long long>mp; long long arr[n]; for(long long i=0;i<n;i++){cin>>arr[i]; mp[arr[i]]++;}
#define str_inp string s; cin>>s;
#define vecint(arr) vector<int>arr
#define vecll(arr) vector<long long>arr
#define umpint(mp) unordered_map<int, int>mp
#define umpll(mp) unordered_map<long long, long long>mp
#define mpint(mp) map<int, int>mp
#define mpll(mp) map<long long, long long>mp
#define pb push_back
#define ppb pop_back
#define w(x) long long x; cin>>x; while(x--)
#define out_YES cout<<"YES\n";
#define out_Yes cout<<"Yes\n";
#define out_yes cout<<"yes\n";
#define out_NO cout<<"NO\n";
#define out_No cout<<"No\n";
#define out_no cout<<"no\n";
#define print(v) ({for(auto x:v) cout<<x<<" ";})
#define sort(v) sort(v.begin(),v.end())
#define reverse(v) reverse(v.begin(), v.end())
#define vmax(v)  *max_element(v.begin(),v.end())
#define vmin(v) *min_element(v.begin(),v.end())
#define acc(v)  accumulate(v.begin(), v.end(), 0)
#define f0(n) for(int i=0;i<n;i++)
#define f1(n) for(int i=1;i<n;i++)
#define fn2(n) for(int i=n-2;i>=0;i--)
#define dis(x) cout<<x<<" "
#define rt return true
#define rf return false
#define fio ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#pragma GCC optimize("03", "unroll-loops")
using namespace std;
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n = nums.size();
        sort(nums);
        vector<vector<int>>ans;
        for(int i=0;i<n;i++){
            if(i>0 && nums[i]==nums[i-1]) continue;
            for(int j=i+1;j<n;j++){
                if(j!=i+1 && nums[j]==nums[j-1]) continue;
                int k = j+1;
                int l = n-1;

                while(k<l){
                    long long sum = nums[i];
                    sum+=nums[j];
                    sum+=nums[k];
                    sum+=nums[l];

                    if(sum==target){
                        vector<int>temp = {nums[i], nums[j], nums[k], nums[l]};
                        ans.pb(temp);
                        k++;
                        l--;
                        while(k<l && nums[k]==nums[k-1]) k++;
                        while(k<l && nums[l]==nums[l+1]) l--;
                    }
                    else if(sum>target){
                        l--;
                    }
                    else if(sum<target){
                        k++;
                    }
                }
            }
        }
        return ans;
    }
};
auto init = []()
{
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    return 'c';
}();
